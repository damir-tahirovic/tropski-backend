{
    "openapi": "3.0.0",
    "info": {
        "title": "Tropski bar",
        "description": "Swagger - tropski bar",
        "contact": {
            "email": "dtahirovic2@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/categories": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Finds all categories with its subcategories",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "categories.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/category-trans": {
            "get": {
                "tags": [
                    "CategoryTran"
                ],
                "summary": "Finds all categories on different languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "category-trans.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/extras": {
            "get": {
                "tags": [
                    "Extra"
                ],
                "summary": "Finds all Extras",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "extras.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/extra-groups": {
            "get": {
                "tags": [
                    "ExtraGorup"
                ],
                "summary": "Finds all Extra groups",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "extra-groups.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/extra-group-extra-pivots": {
            "get": {
                "tags": [
                    "ExtraGroupExtraPivot"
                ],
                "summary": "Finds all extra groups and pivots",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "extra-group-extra-pivots.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/extra-trans": {
            "get": {
                "tags": [
                    "ExtraTran"
                ],
                "summary": "Finds all extras on different languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "extra-trans.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/hotels": {
            "get": {
                "tags": [
                    "Hotel"
                ],
                "summary": "Finds all hotels",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "viewAllHotels",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hotel"
                ],
                "summary": "Create a new hotel",
                "description": "Create a new hotel with the provided data",
                "operationId": "createHotel",
                "requestBody": {
                    "description": "Hotel data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Hotel"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Hotel created successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/hotels/{id}": {
            "get": {
                "tags": [
                    "Hotel"
                ],
                "summary": "Find hotel by ID",
                "description": "Returns a single hotel",
                "operationId": "getHotelById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of hotel to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Hotel not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Hotel"
                ],
                "summary": "Updates a hotel with new data",
                "description": "Updates a hotel with new data",
                "operationId": "updateHotel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of hotel to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated hotel data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Hotel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Hotel updated successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "404": {
                        "description": "Hotel not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hotel"
                ],
                "summary": "Deletes a hotel",
                "description": "Deletes a hotel",
                "operationId": "deleteHotel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of hotel to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hotel deleted successfully"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Hotel not found"
                    }
                }
            }
        },
        "/api/hotel-users": {
            "get": {
                "tags": [
                    "HotelUser"
                ],
                "summary": "Finds all hotel users",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "hotel-users.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/items": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Finds all items",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "items.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Creates a new item",
                "description": "Creates a new item with the provided data",
                "operationId": "items.store",
                "requestBody": {
                    "description": "Item object that needs to be added",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "image": {
                                        "type": "string"
                                    },
                                    "category_id": {
                                        "type": "integer"
                                    },
                                    "extra_group_id": {
                                        "type": "integer"
                                    },
                                    "code": {
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "example": {
                                    "image": "image.jpg",
                                    "category_id": 1,
                                    "extra_group_id": 1,
                                    "code": "ITEM001"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/items/{id}": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Finds an item by its ID",
                "description": "Returns a single item",
                "operationId": "items.show",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the item to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            }
        },
        "/api/item-trans": {
            "get": {
                "tags": [
                    "ItemTran"
                ],
                "summary": "Finds all items on different languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "item-trans.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/item-types": {
            "get": {
                "tags": [
                    "ItemType"
                ],
                "summary": "Finds all item types",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "item-types.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/item-type-trans": {
            "get": {
                "tags": [
                    "ItemTypeTran"
                ],
                "summary": "Finds all main item-types on different languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "item-types-trans.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/languages": {
            "get": {
                "tags": [
                    "Language"
                ],
                "summary": "Finds all languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "languages.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/main-categories/{id}": {
            "get": {
                "tags": [
                    "MainCategory"
                ],
                "summary": "Finds a main category by its ID along with its subcategories",
                "description": "Returns a single main category with its subcategories",
                "operationId": "main-categories.show",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the main category to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "MainCategory not found"
                    }
                }
            }
        },
        "/api/main-categories": {
            "get": {
                "tags": [
                    "MainCategory"
                ],
                "summary": "Finds all main categories with its subcategories",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "main-categories.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/main-category-trans": {
            "get": {
                "tags": [
                    "MainCategoryTran"
                ],
                "summary": "Finds all main categories on different languages",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "main-category-trans.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/api/order-places": {
            "get": {
                "tags": [
                    "OrderPlace"
                ],
                "summary": "Finds all order places",
                "description": "Multiple status values can be provided with comma separated string",
                "operationId": "order-places.index",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that needed to be considered for filter",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "active",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            },
            "post": {
                "tags": [
                    "OrderPlace"
                ],
                "summary": "Create a new order place",
                "operationId": "order-places.store",
                "requestBody": {
                    "description": "OrderPlace object that needs to be added",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderPlace"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "OrderPlace created"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/order-places/{id}": {
            "get": {
                "tags": [
                    "OrderPlace"
                ],
                "summary": "Find order place by ID",
                "description": "Returns a single order place",
                "operationId": "order-places.show",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of order place to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPlace"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order place not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "OrderPlace"
                ],
                "summary": "Updates an order place",
                "operationId": "order-places.update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "OrderPlace id to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "OrderPlace object that needs to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderPlace"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OrderPlace updated"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrderPlace"
                ],
                "summary": "Deletes an order place",
                "operationId": "order-places.destroy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "OrderPlace id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderPlace deleted"
                    },
                    "400": {
                        "description": "Invalid OrderPlace id"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Hotel": {
                "required": [
                    "name",
                    "his_id"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the hotel",
                        "type": "string"
                    },
                    "his_id": {
                        "description": "The HIS ID of the hotel",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OrderPlace": {
                "required": [
                    "hotel_id",
                    "main_cat_id",
                    "name",
                    "code",
                    "reported"
                ],
                "properties": {
                    "hotel_id": {
                        "description": "The ID of the hotel",
                        "type": "integer"
                    },
                    "main_cat_id": {
                        "description": "The ID of the main category",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the order place",
                        "type": "string"
                    },
                    "code": {
                        "description": "The code of the order place",
                        "type": "string"
                    },
                    "reported": {
                        "description": "Whether the order place is reported or not",
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        }
    }
}